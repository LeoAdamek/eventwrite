AWSTemplateFormatVersion: 2010-09-09
Description: |-
  Eventwrite

Parameters:
  StreamShards:
    Type: Number
    MinValue: "1"
    MaxValue: "100000"
    Default: "1"
    Description: |-
      Number of shards to use for event stream.
      More shards increases throughput but increases cost.
  AppCluster:
    Type: String
    Description: ECS Cluster to Deploy to
  AppScale:
    Type: Number
    MinValue: "2"
    Default: "2"
    Description: Desired running app instance count.
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: >
      ID of the VPC to create resources within
  LBSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: >
      Subnets for load balancer
  AppSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: >
      Subnets for application.
  ImageTag:
    Type: String
    Default: latest
    Description: >
      Docker Image tag to deploy of the image.
      Expects the image to be located in ECR in the same account and region
      as this stack.
      
Resources:
  EventStream:
    Type: AWS::Kinesis::Stream
    Properties:
      ShardCount: !Ref StreamShards

  EventBucket:
    Type: AWS::S3::Bucket
    Properties:
      # Block all public access to the bucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  FirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Action: ['sts:AssumeRole']
          Principal:
            Service: firehose.amazonaws.com
          # Only allow kinesis within the same account to gain this role
          Condition:
            StringEquals:
              "sts:ExternalId": !Sub "${AWS::AccountId}"
      Policies:
      - PolicyName: !Sub "${AWS::StackName}-Firehose-Policy"
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - glue:GetTableVersion
                - glue:GetTableVersions
              Resource:
                - !Join [':', ['arn:aws:glue', !Ref "AWS::Region", !Ref "AWS::AccountId", 'catalog']]
                - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${GlueDB}"
                - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/${GlueDB}/${GlueTable}"
            - Effect: Allow
              Action: 
                - s3:PutObject
                - s3:GetBucketLocation
                - s3:AbortMultipartUpload
                - s3:GetBucketLocation
                - s3:ListBucketMultipartUploads
              Resource:
                - !Join ['', ["arn:aws:s3:::", !Ref EventBucket, "/events/*"]]
                - !Join ['', ["arn:aws:s3:::", !Ref EventBucket, "/errors/*"]]
                - !Join ['', ["arn:aws:s3:::", !Ref EventBucket]]
            - Effect: Allow
              Action:
                - kinesis:DescribeStream
                - kinesis:GetRecords
                - kinesis:GetShardIterator
                - kinesis:DeleteRecords
              Resource:
                - !GetAtt EventStream.Arn
  
  GlueDB:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Join ['_', [!Ref "AWS::StackName", "db"]]
        Description: Glue database for Eventwrite
  
  GlueTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref GlueDB
      TableInput:
        Description: Eventwrite Events
        Name: events
        PartitionKeys: []
        TableType: EXTERNAL_TABLE
        StorageDescriptor:
          Location: !Join ['/', ['s3:/', !Ref EventBucket, 'events']]
          InputFormat: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
          SerdeInfo:
            SerializationLibrary: org.apache.hadoop.hive.ql.io.orc.OrcSerde
          Columns:
            - Name: source_id
              Type: string
              Comment: Event Source
            - Name: id
              Type: string
              Comment: Event ID
            - Name: timestamp
              Type: timestamp
              Comment: Event timestamp
            - Name: name
              Type: string
              Comment: Event type Name
            - Name: url
              Type: string
              Comment: Event URL
            - Name: metrics
              Type: map<string,float>
              Comment: Event metrics
            - Name: attributes
              Type: map<string,string>
              Comment: Event attributes


  Firehose:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamType: KinesisStreamAsSource
      KinesisStreamSourceConfiguration:
        KinesisStreamARN: !GetAtt EventStream.Arn
        RoleARN: !GetAtt FirehoseRole.Arn
      ExtendedS3DestinationConfiguration:
        BucketARN: !Join ['', ['arn:aws:s3:::', !Ref EventBucket]]
        RoleARN: !GetAtt FirehoseRole.Arn
        Prefix: "events/"
        ErrorOutputPrefix: "errors/"
        CompressionFormat: UNCOMPRESSED
        BufferingHints:
          IntervalInSeconds: 300
          SizeInMBs: 128
        DataFormatConversionConfiguration:
          Enabled: true
          InputFormatConfiguration:
            Deserializer:
              OpenXJsonSerDe: {}
          OutputFormatConfiguration:
            Serializer:
              OrcSerDe: {}
          SchemaConfiguration:
            CatalogId: !Ref AWS::AccountId
            Region: !Ref AWS::Region
            DatabaseName: !Ref GlueDB
            TableName: !Ref GlueTable
            RoleARN: !GetAtt FirehoseRole.Arn
            VersionId: LATEST 

  # DynamoDB Table used for storing API credentials (possibly other stuff in future)
  ApplicationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S

  ApplicationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: ['sts:AssumeRole']
            Principal:
              Service: 'ecs-tasks.amazonaws.com'
      Policies:
        - PolicyName: KinesisAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:PutRecord*
                Resource:
                  - !GetAtt EventStream.Arn
        - PolicyName: DynamoAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:Get*
                Resource:
                  - !GetAtt ApplicationTable.Arn

  AppServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /ecs/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: ['sts:AssumeRole']
            Principal:
              Service: 'ecs-tasks.amazonaws.com'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  AppTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - "EC2"
        - "FARGATE"
      ExecutionRoleArn: !GetAtt AppServiceRole.Arn
      TaskRoleArn: !GetAtt ApplicationRole.Arn
      NetworkMode: awsvpc
      Family: eventwrite
      Cpu: "256"
      Memory: "512"
      ContainerDefinitions:
        - Name: "eventwrite"
          Image: !Sub ["${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepoName}:${ImageTag}", {RepoName: !ImportValue eventwrite-ecr-repo-name}]
          Environment:
            - Name: AWS_REGION
              Value: !Ref "AWS::Region"
            - Name: EW_STREAM_NAME
              Value: !Ref EventStream
            - Name: EW_DYNAMO_TABLE
              Value: !Ref ApplicationTable
          PortMappings:
            - ContainerPort: 8080
              Protocol: TCP
          Essential: true
          Cpu: 256
          Memory: 512
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Join ['/', ['/ecs', !Ref "AWS::StackName", "eventwrite"]]
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: "ecs"

  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: LoadBalancer SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIpv6: "::/0"
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: "0.0.0.0/0"
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
        - CidrIpv6: "::/0"
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
  
  ApplicationLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: dualstack
      Scheme: internet-facing
      Type: application
      Subnets: !Ref LBSubnets
      SecurityGroups: !
        - !Ref LoadBalancerSG

  LBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - TargetGroupArn: !Ref ApplicationTG
          Type: forward

  ApplicationSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EventWrite application SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref LoadBalancerSG
          FromPort: 8080
          ToPort: 8080
          IpProtocol: tcp
          Description: App Service
        - CidrIp: 0.0.0.0/0
          FromPort: 9200
          ToPort: 9200
          IpProtocol: tcp
          Description: Prometheus

  ApplicationTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      Protocol: HTTP
      Port: 8080
      VpcId: !Ref VPC
      Matcher:
        HttpCode: "401"

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/ecs', !Ref "AWS::StackName", 'eventwrite']]
      RetentionInDays: 60

  ApplicationService:
    Type: AWS::ECS::Service
    DependsOn: [LBListener, LogGroup]
    Properties:
      TaskDefinition: !Ref AppTaskDefinition
      Cluster: !Ref AppCluster
      DesiredCount: !Ref AppScale
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED # DISABLED
          SecurityGroups:
            - !Ref ApplicationSG
          Subnets: !Ref AppSubnets
      LoadBalancers:
        - ContainerName: "eventwrite"
          ContainerPort: 8080
          TargetGroupArn: !Ref ApplicationTG

Outputs: {}